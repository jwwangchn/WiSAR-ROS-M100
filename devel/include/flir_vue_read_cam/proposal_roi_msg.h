// Generated by gencpp from file flir_vue_read_cam/proposal_roi_msg.msg
// DO NOT EDIT!


#ifndef FLIR_VUE_READ_CAM_MESSAGE_PROPOSAL_ROI_MSG_H
#define FLIR_VUE_READ_CAM_MESSAGE_PROPOSAL_ROI_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace flir_vue_read_cam
{
template <class ContainerAllocator>
struct proposal_roi_msg_
{
  typedef proposal_roi_msg_<ContainerAllocator> Type;

  proposal_roi_msg_()
    : header()
    , x0(0)
    , y0(0)
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , x3(0)
    , y3(0)
    , x4(0)
    , y4(0)
    , id(0)  {
    }
  proposal_roi_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x0(0)
    , y0(0)
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , x3(0)
    , y3(0)
    , x4(0)
    , y4(0)
    , id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _x0_type;
  _x0_type x0;

   typedef int32_t _y0_type;
  _y0_type y0;

   typedef int32_t _x1_type;
  _x1_type x1;

   typedef int32_t _y1_type;
  _y1_type y1;

   typedef int32_t _x2_type;
  _x2_type x2;

   typedef int32_t _y2_type;
  _y2_type y2;

   typedef int32_t _x3_type;
  _x3_type x3;

   typedef int32_t _y3_type;
  _y3_type y3;

   typedef int32_t _x4_type;
  _x4_type x4;

   typedef int32_t _y4_type;
  _y4_type y4;

   typedef int32_t _id_type;
  _id_type id;




  typedef boost::shared_ptr< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> const> ConstPtr;

}; // struct proposal_roi_msg_

typedef ::flir_vue_read_cam::proposal_roi_msg_<std::allocator<void> > proposal_roi_msg;

typedef boost::shared_ptr< ::flir_vue_read_cam::proposal_roi_msg > proposal_roi_msgPtr;
typedef boost::shared_ptr< ::flir_vue_read_cam::proposal_roi_msg const> proposal_roi_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace flir_vue_read_cam

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'flir_vue_read_cam': ['/home/ubuntu/Documents/DJI-Challenge/src/flir_vue_read_cam/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1471d7157eab7383c89e10c784af414";
  }

  static const char* value(const ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1471d7157eab738ULL;
  static const uint64_t static_value2 = 0x3c89e10c784af414ULL;
};

template<class ContainerAllocator>
struct DataType< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flir_vue_read_cam/proposal_roi_msg";
  }

  static const char* value(const ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32 x0\n\
int32 y0\n\
int32 x1\n\
int32 y1\n\
int32 x2\n\
int32 y2\n\
int32 x3\n\
int32 y3\n\
int32 x4\n\
int32 y4\n\
int32 id\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x0);
      stream.next(m.y0);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.x3);
      stream.next(m.y3);
      stream.next(m.x4);
      stream.next(m.y4);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct proposal_roi_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flir_vue_read_cam::proposal_roi_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x0);
    s << indent << "y0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y0);
    s << indent << "x1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y2);
    s << indent << "x3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x3);
    s << indent << "y3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y3);
    s << indent << "x4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x4);
    s << indent << "y4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y4);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLIR_VUE_READ_CAM_MESSAGE_PROPOSAL_ROI_MSG_H
